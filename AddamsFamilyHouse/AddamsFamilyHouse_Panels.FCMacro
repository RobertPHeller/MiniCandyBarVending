#*****************************************************************************
#
#  System        : 
#  Module        : 
#  Object Name   : $RCSfile$
#  Revision      : $Revision$
#  Date          : $Date$
#  Author        : $Author$
#  Created By    : Robert Heller
#  Created       : Mon Jun 2 15:01:05 2025
#  Last Modified : <250603.1632>
#
#  Description	
#
#  Notes
#
#  History
#	
#*****************************************************************************
#
#    Copyright (C) 2025  Robert Heller D/B/A Deepwoods Software
#			51 Locke Hill Road
#			Wendell, MA 01379-9728
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# 
#
#*****************************************************************************


import FreeCAD as App
import Part, TechDraw, Mesh, TechDrawGui
from FreeCAD import Base

import os
import sys
sys.path.append(os.path.dirname(__file__))
import time
from PySide.QtCore import QCoreApplication, QEventLoop, QTimer

def execute(loop, ms):
    timer = QTimer()
    timer.setSingleShot(True)
    
    timer.timeout.connect(loop.quit)
    timer.start(ms)
    loop.exec_()

def sleep(ms):
    if not QCoreApplication.instance():
        app = QCoreApplication([])
        execute(app, ms)
    else:
        loop = QEventLoop()
        execute(loop, ms)

from collections import defaultdict

def EidthBucket(x):
    return round(x / 3.5)*3.5

def mesh2ZXPlanes(points,triangles,namebase,newdoc):
    Zplanes = defaultdict(list)
    zs = set()
    for t in triangles:
        for tp in t:
            p = points[tp]
            #print("*** p is ",p)
            zb = EidthBucket(p.z)
            Zplanes[zb].append(t)
            #print("*** planes[",zb,"] = ",Zplanes[zb])
            zs.add(zb)
            #print("*** zs is ",zs)
    zlist = list()
    for z in zs:
        zlist.append(z)
    zlist.sort()
    for iz,z in enumerate(zlist):
        #print("*** iz = ",iz,", z = ",z)
        meshtriangles = list()
        for t in Zplanes[z]:
            tri = list()
            for tp in t:
                point = points[tp]
                zb = EidthBucket(point.z)
                #print("*** zb = ",zb,", point.z = ",point.z)
                if zb == z:
                    tri.append(point)
            if len(tri) == 3:
                for tp  in tri:
                    meshtriangles.append(tp)
        if len(meshtriangles) > 0:
            #print("*** len(meshtriangles) is ",len(meshtriangles))
            mesh = Mesh.Mesh(meshtriangles)
            #print("*** mesh is ",mesh)
            name = "%sZWall%d"%(namebase,iz)
            #print("*** name is ",name)
            shape = Part.Shape()
            shape.makeShapeFromMesh(mesh.Topology, 3.5) 
            solid = Part.makeSolid(shape)
            obj = newdoc.addObject("Part::Feature",name)
            #print("*** obj is ",obj)
            obj.Shape = solid
            obj.Label=name
            obj.ViewObject.ShapeColor=tuple([0.5,0.5,0.5])
    Xplanes = defaultdict(list)
    xs = set()
    for t in triangles:
        for tp in t:
            p = points[tp]
            #print("*** p is ",p)
            xb = EidthBucket(p.x)
            Xplanes[xb].append(t)
            #print("*** planes[",xb,"] = ",Zplanes[xb])
            xs.add(xb)
            #print("*** xs is ",xs)
    xlist = list()
    for x in xs:
        xlist.append(x)
    xlist.sort()
    for ix,x in enumerate(xlist):
        #print("*** ix = ",ix,", x = ",x)
        meshtriangles = list()
        for t in Xplanes[x]:
            tri = list()
            for tp in t:
                point = points[tp]
                xb = EidthBucket(point.x)
                #print("*** xb = ",xb,", point.x = ",point.x)
                if xb == x:
                    tri.append(point)
            if len(tri) == 3:
                for tp  in tri:
                    meshtriangles.append(tp)
        if len(meshtriangles) > 0:
            #print("*** len(meshtriangles) is ",len(meshtriangles))
            mesh = Mesh.Mesh(meshtriangles)
            #print("*** mesh is ",mesh)
            name = "%sXWall%d"%(namebase,ix)
            #print("*** name is ",name)
            shape = Part.Shape()
            shape.makeShapeFromMesh(mesh.Topology, 0.05) 
            solid = Part.makeSolid(shape)
            obj = newdoc.addObject("Part::Feature",name)
            #print("*** obj is ",obj)
            obj.Shape = solid
            obj.Label=name
            obj.ViewObject.ShapeColor=tuple([0.5,0.5,0.5])

if __name__ == '__main__':
    doc = None
    newdoc = None
    for docname in App.listDocuments():
        lddoc = App.getDocument(docname)
        if lddoc.Label == 'addams_family_house':
            doc = lddoc
        if lddoc.Label == 'addams_family_house_panels':
            newdoc = lddoc
    if doc == None:
        App.open("addams_family_house.FCStd")
        doc = App.getDocument('addams_family_house')
    if newdoc == None:
        newdoc = App.newDocument("addams_family_house_panels")
    App.ActiveDocument=newdoc

    house = doc.Sketchfab_Scene_Sketchfab_model_root_GLTF_SceneRootNode_House_0_Object_4
    houseMesh = house.Mesh
    topo = houseMesh.Topology
    points, triangles = topo
    mesh2ZXPlanes(points,triangles,"House_0_Object_4",newdoc)
    house = doc.Sketchfab_Scene_Sketchfab_model_root_GLTF_SceneRootNode_House_0_Object_5
    houseMesh = house.Mesh
    topo = houseMesh.Topology
    points, triangles = topo
    mesh2ZXPlanes(points,triangles,"House_0_Object_5",newdoc)
    triangleroof = doc.Sketchfab_Scene_Sketchfab_model_root_GLTF_SceneRootNode_Triangle_roof_6_Object_17
    triangleroofMesh = triangleroof.Mesh
    topo = triangleroofMesh.Topology
    points, triangles = topo
    mesh2ZXPlanes(points,triangles,"Triangle_roof_6_Object_17",newdoc)
    greenhouse = doc.Sketchfab_Scene_Sketchfab_model_root_GLTF_SceneRootNode_Greenhouse_7_Object_21
    greenhouseMesh = greenhouse.Mesh
    topo = greenhouseMesh.Topology
    points, triangles = topo
    mesh2ZXPlanes(points,triangles,"Greenhouse_7_Object_21",newdoc)
    greenhouse = doc.Sketchfab_Scene_Sketchfab_model_root_GLTF_SceneRootNode_Greenhouse_7_Object_23
    greenhouseMesh = greenhouse.Mesh
    topo = greenhouseMesh.Topology
    points, triangles = topo
    mesh2ZXPlanes(points,triangles,"Greenhouse_7_Object_23",newdoc)
    dormers = doc.Sketchfab_Scene_Sketchfab_model_root_GLTF_SceneRootNode_Roof_windows_21_Object_54
    dormersMesh = dormers.Mesh
    topo = dormersMesh.Topology
    points, triangles = topo
    mesh2ZXPlanes(points,triangles,"Roof_windows_21_Object_54",newdoc)
            


    Gui.SendMsgToActiveView("ViewFit")
    
