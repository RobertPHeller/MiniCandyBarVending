#*****************************************************************************
#
#  System        : 
#  Module        : 
#  Object Name   : $RCSfile$
#  Revision      : $Revision$
#  Date          : $Date$
#  Author        : $Author$
#  Created By    : Robert Heller
#  Created       : Thu Jun 5 14:31:17 2025
#  Last Modified : <250608.1555>
#
#  Description	
#
#  Notes
#
#  History
#	
#*****************************************************************************
#
#    Copyright (C) 2025  Robert Heller D/B/A Deepwoods Software
#			51 Locke Hill Road
#			Wendell, MA 01379-9728
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# 
#
#*****************************************************************************


import FreeCAD as App
import Part, TechDraw, Mesh, MeshPart, TechDrawGui
from FreeCAD import Base

import os
import sys
sys.path.append(os.path.dirname(__file__))
import time
from PySide.QtCore import QCoreApplication, QEventLoop, QTimer
def execute(loop, ms):
    timer = QTimer()
    timer.setSingleShot(True)
    
    timer.timeout.connect(loop.quit)
    timer.start(ms)
    loop.exec_()

def sleep(ms):
    if not QCoreApplication.instance():
        app = QCoreApplication([])
        execute(app, ms)
    else:
        loop = QEventLoop()
        execute(loop, ms)

from abc import ABCMeta, abstractmethod, abstractproperty

class BirchPanel(metaclass=ABCMeta):
    @property
    def Thickness(self):
        return .125 * 25.4
    @property
    def FingerWidth(self):
        return .5 * 25.4
    @property
    def Color(self):
        return (.8,.8,.8)

class LargeArchWindow(BirchPanel):
    # -263.86346435546875,  .8360995054244995  -- -241.0014190673828 , 0.8360995054244995
    # -263.86346435546875 , 50.67988586425781                  50.67988586425781
    #       -252.43243408203125 , 66.17835235595703
    __archMinorRadius = (-241.0014190673828) - (-252.43243408203125)
    __archMajorRadius = 66.17835235595703-50.67988586425781
    __bottomRectHeight = 50.67988586425781-.8360995054244995
    __bottomRectWidth = (-241.0014190673828) - (-263.86346435546875)
    def __init__(self,origin,side='Front'):
        if not isinstance(origin,Base.Vector):
            raise RuntimeError("origin is not a Vector!")
        self.origin = origin
        if side == 'Front':
            archOrig = origin.add(Base.Vector(self.__archMinorRadius,0,
                                              self.__bottomRectHeight))
            archMajor = archOrig.add(Base.Vector(0,0,self.__archMajorRadius))
            archMinor = archOrig.add(Base.Vector(-self.__archMinorRadius,0,0))
            extrude = Base.Vector(0,self.Thickness,0)
            #print("*** LargeArchWindow.__init__(): archOrig is ",archOrig)
            #print("*** LargeArchWindow.__init__(): archMajor is ",archMajor)
            #print("*** LargeArchWindow.__init__(): archMinor is ",archMinor)
            archEllipse=Part.Ellipse(archMajor,archMinor,archOrig)
            archWire = Part.Wire(archEllipse.toShape())
            archFace = Part.Face(archWire)
            arch     = archFace.extrude(extrude)
            base     = Part.makePlane(self.__bottomRectHeight,
                                      self.__bottomRectWidth,
                                      origin,
                                      Base.Vector(0,1,0)).extrude(extrude)
            self.window = base.fuse(arch)
        elif side == 'Left':
            archOrig = origin.add(Base.Vector(0,
                                              -self.__archMinorRadius,
                                              self.__bottomRectHeight))
            archMajor = archOrig.add(Base.Vector(0,0,self.__archMajorRadius))
            rchMinor = archOrig.add(Base.Vector(0,self.__archMinorRadius,0))
            extrude = Base.Vector(-self.Thickness,0,0)
            archEllipse=Part.Ellipse(archMajor,archMinor,archOrig)
            archWire = Part.Wire(archEllipse.toShape())
            archFace = Part.Face(archWire)
            arch     = archFace.extrude(extrude)
            temp = Base.Vector(0,-self.__bottomRectWidth,0)
            base     = Part.makePlane(self.__bottomRectHeight,
                                      self.__bottomRectWidth,
                                      origin.add(temp),
                                      Base.Vector(-1,0,0)).extrude(extrude)
            self.window = base.fuse(arch)
        elif side == 'Right':
            archOrig = origin.add(Base.Vector(0,
                                              self.__archMinorRadius,
                                              self.__bottomRectHeight))
            archMajor = archOrig.add(Base.Vector(0,0,self.__archMajorRadius))
            rchMinor = archOrig.add(Base.Vector(0,self.__archMinorRadius,0))
            extrude = Base.Vector(self.Thickness,0,0)
            archEllipse=Part.Ellipse(archMajor,archMinor,archOrig)
            archWire = Part.Wire(archEllipse.toShape())
            archFace = Part.Face(archWire)
            arch     = archFace.extrude(extrude)
            base     = Part.makePlane(self.__bottomRectHeight,
                                      self.__bottomRectWidth,
                                      origin,
                                      Base.Vector(1,0,0)).extrude(extrude)
            self.window = base.fuse(arch)
        else:
            raise RuntimeError("unsuported side!")
    def Cut(self,wall):
        return wall.cut(self.window)

class WallPanel(BirchPanel):
    def __init__(self,name,origin,width,height,*,windows=[],side='Front'):
        self.name = name
        if not isinstance(origin,Base.Vector):
            raise RuntimeError("origin is not a Vector!")
        self.origin = origin
        if side == 'Front':
            #print("*** WallPanel(): width = ",width,", height = ",height)
            extrude = Base.Vector(0,self.Thickness,0)
            panel = Part.makePlane(height,width,origin,Base.Vector(0,1,0)).extrude(extrude)
        elif side == 'Left':
            extrude = Base.Vector(-self.Thickness,0,0)
            panel = Part.makePlane(height,width,
                                   origin.add(Base.Vector(0,-width,0)),
                                   Base.Vector(-1,0,0)).extrude(extrude)
        elif side == 'Right':
            extrude = Base.Vector(self.Thickness,0,0)
            panel = Part.makePlane(height,width,
                                   origin.add(Base.Vector(0,width,0)),
                                   Base.Vector(1,0,0)).extrude(extrude)
        else:
            raise RuntimeError("unsuported side!")
        self.windows = list()
        for org in windows:
            w = LargeArchWindow(origin.add(org),side)
            panel = w.Cut(panel)
            self.windows.append(w)
        self.wall = panel
    def CutXZfingers(self,*,startx=0,endx=0,zoffset=0,yoffset=0):
        x = startx
        ZNorm=Base.Vector(0,0,1)
        panel = self.wall
        while x <= endx:
            panel = panel.cut(Part.makePlane(self.FingerWidth,\
                                             self.Thickness,\
                                             self.origin.add(Base.Vector(x,yoffset,zoffset)),\
                                             ZNorm).extrude(Base.Vector(0,0,self.Thickness)))
            x += self.FingerWidth*2
        self.wall = panel
    def CutYZfingers(self,*,starty=0,endy=0,zoffset=0,xoffset=0):
        y = starty
        ZNorm=Base.Vector(0,0,1) 
        panel = self.wall
        while y <= endy:
            panel = panel.cut(Part.makePlane(self.Thickness,\
                                             self.FingerWidth,\
                                             self.origin.add(Base.Vector(xoffset,y,zoffset)),\
                                             ZNorm).extrude(Base.Vector(0,0,self.Thickness)))
            y += self.FingerWidth*2
        self.wall = panel
    def CutZYfingers(self,*,startz=0,endz=0,yoffset=0,xoffset=0):
        z = startz
        YNorm=Base.Vector(0,1,0)
        panel = self.wall
        while z <= endz:
            panel = panel.cut(Part.makePlane(self.FingerWidth,\
                                             self.Thickness,\
                                             self.origin.add(Base.Vector(xoffset,yoffset,z)),\
                                             YNorm).extrude(Base.Vector(0,self.Thickness,0)))
            z += self.FingerWidth*2
        self.wall = panel
    def Cut(self,otherWall):
        self.wall = self.wall.cut(otherWall.wall)
    def show(self,doc=None):
        if doc==None:
            doc = App.activeDocument()
        obj = doc.addObject("Part::Feature",self.name)
        obj.Shape = self.wall
        obj.Label=self.name
        obj.ViewObject.ShapeColor=self.Color

class EntryWayAndDoor(object):
    __baseDepth = 183.25379943847656-115.00755310058594
    __baseWidth = 48.76459503173828*2
    __baseHeight = 2.797820568084717-(-18.654172897338867)
    __stepsXOffset = 48.76459503173828-38.98531723022461
    __stepsWidth = 38.98531723022461*2
    __stepsDepths= [183.25379943847656-150.29324340820312,
                    183.25379943847656-158.53338623046875,
                    183.25379943847656-166.77352905273438,
                    183.25379943847656-175.01365661621094]
    __stepsZOffset=[-2.572909116744995-(-18.654172897338867),
                    -7.933324813842773-(-18.654172897338867),
                    -13.293740272521973-(-18.654172897338867),
                    -18.654155731201172-(-18.654172897338867)]
    __frontIndentWidth = (-40.49898910522461)-(-47.277015686035156)
    __frontIndentHeight = (1.3102514743804932)-(-17.166584014892578)
    __frontIndentXOffset = -47.277015686035156-(-48.76459503173828)
    __frontIndentZOffset = (-17.166584014892578)-(-18.654163360595703)
    __frontIndentDepth = 183.253799438476-182.65151977539062
    __frontCoverRoundRadius=.34346008300782
    __frontCoverThickness = .34346008300782*2
    __frontCoverWidth = (-39.0117073059082) - (-49.463340759277344)
    __frontCoverLength = 183.9518737792-115.007431030273
    __columBaseWidth = 16.088188171386718
    __columBaseDepth = 16.08079528808592
    __columBaseHeight = 14.0555922985076906 
    __columCenterY = 134.2124481201172 - 115.00755310058594 + \
                        ((150.29324340820312-134.2124481201172)/2)
    __columBaseCoverThickness = 1.689676284790038
    __columBaseCoverRoundRadius=1.689676284790038/2
    __columBaseCoverWidth=16.933029174804678
    __columBaseCoverDepth=16.92539978027340
    __columBaseRadius = 5.95060729980468
    __columTopRadius  = 5.95060729980468 - 1.61177062988282
    __columHeight = 77.13805389404297 - 18.537721633911133
    __columnC1Radius = (5.95060729980468 - 1.61177062988282)+.39648437500006
    __columnC1Height = 1.00946044921875
    __columnC2Radius = (5.95060729980468 - 1.61177062988282)+.39648437500006 +\
                        .54496765136719
    __columnC2Height = 2.83856964111328
    __columnC3Radius = (5.95060729980468 - 1.61177062988282)+.39648437500006 +\
                        .54496765136719 + 1.96015930175781
    __columnC3Height = 3.67766571044922
    __backWallXOff = -39.0117073059082 - (-48.76459503173828)
    __backWallDepth = 124.75366973876953-115.00755310058594
    __backWallWidth = 38.98501968383789 - (-39.0117073059082)
    __backWallHeight = 16.08079528808592+1.689676284790038+\
                       (77.13805389404297 - 18.537721633911133)+\
                       1.00946044921875+2.83856964111328+3.67766571044922
    __outerDoorWayXOffset = -18.049304962158203 - (-48.76459503173828)
    __outerDoorWayZOffset = 7.670636177062988 - (-18.654172897338867)
    __outerDoorWayMinorRadius = 18
    __outerDoorWayMajorRadius = 24.2
    __outerDoorWayBottomRectHeight = 44.8
    __outerDoorWayBottomRectWidth  = 36
    __outerDoorWayDepth = (124.75366973876953-115.00755310058594)+10
    __entrywayRoofDepth = 162.4363250732422-115.00755310058594
    __entrywayRoofHeight = 88.55018615722656-84.65019226074219
    __entrywayRoofZOffset = 84.65019226074219-(-18.654172897338867)
    __entrywayColor=(.7,.7, .7)
    def __init__(self,name,origin):
        self.name = name
        if not isinstance(origin,Base.Vector):
            raise RuntimeError("origin is not a Vector!")
        self.origin = origin
        base = Part.makePlane(self.__baseWidth,self.__baseDepth,
                              origin.add(Base.Vector(0,-self.__baseDepth,0)),
                              Base.Vector(0,0,1)).extrude(
                                        Base.Vector(0,0,self.__baseHeight))
        for sd,sz in zip(self.__stepsDepths,self.__stepsZOffset):
            stepcut = Part.makePlane(self.__stepsWidth,sd,
                                     origin.add(Base.Vector(
                                                self.__stepsXOffset,
                                                -self.__baseDepth,
                                                sz)),
                                     Base.Vector(0,0,1)).extrude(
                                        Base.Vector(0,0,self.__baseHeight-sz))
            base = base.cut(stepcut)
        frontIndent = Part.makePlane(self.__frontIndentHeight,
                                     self.__frontIndentWidth,
                                     origin.add(Base.Vector(
                                            self.__frontIndentXOffset,
                                            -self.__baseDepth,
                                            self.__frontIndentZOffset)),
                                     Base.Vector(0,1,0)
                         ).extrude(Base.Vector(0,self.__frontIndentDepth,0))
        base = base.cut(frontIndent)
        frontIndent = Part.makePlane(self.__frontIndentHeight,
                                     self.__frontIndentWidth,
                                     origin.add(Base.Vector(
                                            self.__baseWidth -
                                                (self.__frontIndentXOffset+
                                                 self.__frontIndentWidth),
                                            -self.__baseDepth,
                                            self.__frontIndentZOffset)),
                                     Base.Vector(0,1,0)
                         ).extrude(Base.Vector(0,self.__frontIndentDepth,0))
        base = base.cut(frontIndent)
        sidewidth = (self.__baseWidth-self.__stepsWidth)/2
        
        frontCoverOrigin = origin.add(
            Base.Vector(-((self.__frontCoverWidth-sidewidth)/2),
                        -self.__frontCoverLength,
                        self.__baseHeight))
        frontCover = self.__makeFrontCover(frontCoverOrigin)
        base = base.fuse(frontCover)
        frontCoverOrigin = origin.add(
            Base.Vector(self.__baseWidth-sidewidth
                        -((self.__frontCoverWidth-sidewidth)/2),
                        -self.__frontCoverLength,
                        self.__baseHeight))
        frontCover = self.__makeFrontCover(frontCoverOrigin)
        base = base.fuse(frontCover)
        columCenterOrigin = origin.add(Base.Vector(self.__stepsXOffset+
                                                    self.__columBaseWidth/2,
                                                    -self.__columCenterY,
                                                    self.__baseHeight))
        columnWithBase = self.__makecolumnWithBase(columCenterOrigin)
        base = base.fuse(columnWithBase)
        columCenterOrigin = origin.add(Base.Vector(self.__baseWidth-
                                                    self.__stepsXOffset-
                                                    self.__columBaseWidth/2,
                                                    -self.__columCenterY,
                                                    self.__baseHeight))
        columnWithBase = self.__makecolumnWithBase(columCenterOrigin)
        base = base.fuse(columnWithBase)
        backwall = Part.makePlane(self.__backWallWidth,
                                  self.__backWallDepth,
                                  origin.add(Base.Vector(self.__backWallXOff,
                                                         -self.__backWallDepth,
                                                         self.__baseHeight))
                                  ).extrude(Base.Vector(0,0,self.__backWallHeight))
        outerDoorWayTunnelOrigin = origin.add(Base.Vector(
                    self.__outerDoorWayXOffset,0,self.__outerDoorWayZOffset))
        outerDoorWayTunnelArchOrig = outerDoorWayTunnelOrigin.add(
                            Base.Vector(self.__outerDoorWayMinorRadius,0,
                                        self.__outerDoorWayBottomRectHeight))
        outerDoorWayTunnelMajor = outerDoorWayTunnelArchOrig.add(
                            Base.Vector(0,0,self.__outerDoorWayMajorRadius))
        outerDoorWayTunnelMinor = outerDoorWayTunnelArchOrig.add(
                            Base.Vector(-self.__outerDoorWayMinorRadius,0,0))
        outerDoorWayTunnelExtrude = Base.Vector(0,-self.__outerDoorWayDepth,0)
        outerDoorWayTunnelEllipse=Part.Ellipse(
                    outerDoorWayTunnelMajor,
                    outerDoorWayTunnelMinor,
                    outerDoorWayTunnelArchOrig)
        outerDoorWayTunnelWire = Part.Wire(outerDoorWayTunnelEllipse.toShape())
        outerDoorWayTunnelFace = Part.Face(outerDoorWayTunnelWire)
        outerDoorWayTunnelArch = outerDoorWayTunnelFace.extrude(outerDoorWayTunnelExtrude)
        outerDoorWayTunnelBase = Part.makePlane(self.__outerDoorWayBottomRectHeight,
                                                self.__outerDoorWayBottomRectWidth,
                                                outerDoorWayTunnelOrigin,
                                                Base.Vector(0,1,0)
                                                ).extrude(outerDoorWayTunnelExtrude)
                                                
        self.outerDoorWayTunnel =  outerDoorWayTunnelBase.fuse(outerDoorWayTunnelArch)
        backwall = backwall.cut(self.outerDoorWayTunnel)
        base = base.fuse(backwall)
        roof = Part.makePlane(self.__baseWidth,self.__entrywayRoofDepth,
                              origin.add(
                                    Base.Vector(0,
                                                -self.__entrywayRoofDepth, 
                                                self.__entrywayRoofZOffset))
                              ).extrude(Base.Vector(0,0,self.__entrywayRoofHeight))
        base = base.fuse(roof)
        self.entryway = base
    def __makecolumnWithBase(self,columCenterOrigin):
        baseOrigin = columCenterOrigin.add(
                Base.Vector(-(self.__columBaseWidth/2),
                            -(self.__columBaseDepth/2),0))
        columnWithBase = Part.makePlane(self.__columBaseWidth,
                                         self.__columBaseDepth,
                                         baseOrigin,
                                         Base.Vector(0,0,1)).extrude(
                                            Base.Vector(0,0,
                                                    self.__columBaseHeight))
        columBaseCover = self.__makeColumnBaseCover(baseOrigin.add(
                                            Base.Vector(-(self.__columBaseCoverWidth-self.__columBaseWidth)/2,
                                                        -(self.__columBaseCoverDepth-self.__columBaseDepth)/2,
                                                        self.__columBaseHeight)))

        columnWithBase = columnWithBase.fuse(columBaseCover)
        column = Part.makeCone(self.__columBaseRadius,
                               self.__columTopRadius,
                               self.__columHeight,
                               columCenterOrigin.add(
                                Base.Vector(0,0,self.__columBaseHeight+
                                                self.__columBaseCoverThickness)))
        columnWithBase = columnWithBase.fuse(column)
        c1 = Part.makeCircle(self.__columnC1Radius,
                             columCenterOrigin.add(
                                Base.Vector(0,0,self.__columBaseHeight+
                                                self.__columBaseCoverThickness+
                                                self.__columHeight)))
        c1 = Part.Face(Part.Wire(c1)).extrude(
                                Base.Vector(0,0,self.__columnC1Height))
        columnWithBase = columnWithBase.fuse(c1)
        c2 = Part.makeCircle(self.__columnC2Radius,
                             columCenterOrigin.add(
                                Base.Vector(0,0,self.__columBaseHeight+
                                                self.__columBaseCoverThickness+
                                                self.__columHeight+
                                                self.__columnC1Height
                                                )))
        c2 = Part.Face(Part.Wire(c2)).extrude(
                            Base.Vector(0,0,self.__columnC2Height))
        columnWithBase = columnWithBase.fuse(c2)
        c3 = Part.makeCircle(self.__columnC3Radius,
                             columCenterOrigin.add(
                                Base.Vector(0,0,self.__columBaseHeight+
                                                self.__columBaseCoverThickness+
                                                self.__columHeight+
                                                self.__columnC1Height+
                                                self.__columnC2Height)))
        c3 = Part.Face(Part.Wire(c3)).extrude(
                                Base.Vector(0,0,self.__columnC3Height))
        columnWithBase = columnWithBase.fuse(c3)
        return columnWithBase
    def __makeColumnBaseCover(self,columBaseCoverOrigin):
        columBaseCover = Part.makePlane(self.__columBaseCoverWidth,
                                         self.__columBaseCoverDepth,
                                         columBaseCoverOrigin,
                                         Base.Vector(0,0,1)).extrude(
                                            Base.Vector(0,0,
                                                    self.__columBaseCoverThickness))
        round1 = Part.makeCircle(self.__columBaseCoverRoundRadius,
                        columBaseCoverOrigin.add(
                             Base.Vector(0,
                                         -self.__columBaseCoverRoundRadius,
                                         self.__columBaseCoverRoundRadius)),
                        Base.Vector(0,-1,0))
        round1 = Part.Face(Part.Wire(round1)
                     ).extrude(Base.Vector(0,self.__columBaseCoverDepth+
                                             (self.__columBaseCoverRoundRadius*2),
                                             0))
        miter1 = Part.makePlane(self.__columBaseCoverThickness,
                                self.__columBaseCoverThickness,
                                columBaseCoverOrigin.add(
                                    Base.Vector(-self.__columBaseCoverRoundRadius,
                                                -self.__columBaseCoverRoundRadius,
                                                self.__columBaseCoverThickness)),
                                Base.Vector(1,1,0)).extrude(Base.Vector(
                                    self.__columBaseCoverThickness,
                                    self.__columBaseCoverThickness,0))
        #self.round = round1
        round1 = round1.cut(miter1)
        #self.miter = miter1
        miter1 = Part.makePlane(self.__columBaseCoverThickness,
                                self.__columBaseCoverThickness,
                                columBaseCoverOrigin.add(
                                    Base.Vector(-self.__columBaseCoverRoundRadius,
                                                self.__columBaseCoverDepth+
                                                self.__columBaseCoverRoundRadius,
                                                self.__columBaseCoverThickness)),
                                Base.Vector(1,1,0)).extrude(Base.Vector(
                                    self.__columBaseCoverThickness,
                                    self.__columBaseCoverThickness,0))
        round1 = round1.cut(miter1)
        #self.round = round1
        #self.miter = miter1
        columBaseCover = columBaseCover.fuse(round1)
        round1 = Part.makeCircle(self.__columBaseCoverRoundRadius,
                                 columBaseCoverOrigin.add(
                              Base.Vector(-self.__columBaseCoverRoundRadius,0
                                          ,self.__columBaseCoverRoundRadius)),
                                 Base.Vector(1,0,0))
        round1 = Part.Face(Part.Wire(round1)
                ).extrude(Base.Vector(self.__columBaseCoverWidth + 
                                        self.__columBaseCoverRoundRadius*2,0,0))
        miter1 = Part.makePlane(self.__columBaseCoverThickness,
                                self.__columBaseCoverThickness,
                                columBaseCoverOrigin.add(
                                    Base.Vector(self.__columBaseCoverRoundRadius,
                                                self.__columBaseCoverRoundRadius,
                                                self.__columBaseCoverThickness)),
                                 Base.Vector(-1,-1,0)).extrude(Base.Vector(
                                            -self.__columBaseCoverThickness,
                                            -self.__columBaseCoverThickness,0))
        round1 = round1.cut(miter1)
        #self.miter = miter1
        #self.round = round1
        miter1 = Part.makePlane(self.__columBaseCoverThickness,
                                self.__columBaseCoverThickness,
                                columBaseCoverOrigin.add(
                                    Base.Vector(self.__columBaseCoverWidth+
                                                self.__columBaseCoverRoundRadius,
                                                -self.__columBaseCoverRoundRadius,
                                                self.__columBaseCoverThickness)),
                                 Base.Vector(-1,1,0)).extrude(Base.Vector(
                                            -self.__columBaseCoverThickness,
                                            self.__columBaseCoverThickness,0))
        #self.miter = miter1
        round1 = round1.cut(miter1)
        columBaseCover = columBaseCover.fuse(round1)
        round1 = Part.makeCircle(self.__columBaseCoverRoundRadius,
                                 columBaseCoverOrigin.add(
                              Base.Vector(self.__columBaseCoverWidth,
                                          -self.__columBaseCoverRoundRadius
                                          ,self.__columBaseCoverRoundRadius)),
                                 Base.Vector(0,-1,0))
        round1 = Part.Face(Part.Wire(round1)
                ).extrude(Base.Vector(0,self.__columBaseCoverDepth + 
                                        self.__columBaseCoverThickness,0))
        miter1 = Part.makePlane(self.__columBaseCoverThickness,
                                self.__columBaseCoverThickness,
                                columBaseCoverOrigin.add(
                                    Base.Vector(self.__columBaseCoverWidth+
                                                self.__columBaseCoverRoundRadius,
                                                -self.__columBaseCoverRoundRadius,
                                                self.__columBaseCoverThickness)),
                                 Base.Vector(-1,-1,0)).extrude(Base.Vector(
                                            -self.__columBaseCoverThickness,
                                            -self.__columBaseCoverThickness,0))
        round1 = round1.cut(miter1)
        #self.round = round1
        #self.miter = miter1
        miter1 = Part.makePlane(self.__columBaseCoverThickness,
                                self.__columBaseCoverThickness,
                                columBaseCoverOrigin.add(
                                    Base.Vector(self.__columBaseCoverWidth+
                                                self.__columBaseCoverRoundRadius,
                                                self.__columBaseCoverDepth+
                                                self.__columBaseCoverRoundRadius,
                                                self.__columBaseCoverThickness)),
                                 Base.Vector(-1,-1,0)).extrude(Base.Vector(
                                            -self.__columBaseCoverThickness,
                                            -self.__columBaseCoverThickness,0))
        round1 = round1.cut(miter1)
        #self.round = round1
        #self.miter = miter1
        columBaseCover = columBaseCover.fuse(round1)
        round1 = Part.makeCircle(self.__columBaseCoverRoundRadius,
                                 columBaseCoverOrigin.add(
                              Base.Vector(-self.__columBaseCoverRoundRadius,
                                          self.__columBaseCoverDepth,
                                          self.__columBaseCoverRoundRadius)),
                                 Base.Vector(1,0,0))
        round1 = Part.Face(Part.Wire(round1)
                ).extrude(Base.Vector(self.__columBaseCoverWidth + 
                                        self.__columBaseCoverRoundRadius*2,0,0))
        miter1 = Part.makePlane(self.__columBaseCoverThickness,
                                self.__columBaseCoverThickness,
                                columBaseCoverOrigin.add(
                                    Base.Vector(-self.__columBaseCoverRoundRadius,
                                                self.__columBaseCoverDepth+
                                                self.__columBaseCoverRoundRadius,
                                                self.__columBaseCoverThickness)),
                                 Base.Vector(1,-1,0)).extrude(Base.Vector(
                                            self.__columBaseCoverThickness,
                                            -self.__columBaseCoverThickness,0))
        round1 = round1.cut(miter1)
        #self.miter = miter1
        #self.round = round1
        miter1 = Part.makePlane(self.__columBaseCoverThickness,
                                self.__columBaseCoverThickness,
                                columBaseCoverOrigin.add(
                                    Base.Vector(self.__columBaseCoverWidth+
                                                self.__columBaseCoverThickness*1.45,
                                                self.__columBaseCoverDepth,
                                                self.__columBaseCoverThickness)),
                                 Base.Vector(-1,-1,0)).extrude(Base.Vector(
                                            -self.__columBaseCoverThickness,
                                            -self.__columBaseCoverThickness,0))
        #self.miter = miter1
        round1 = round1.cut(miter1)
        #self.round = round1
        columBaseCover = columBaseCover.fuse(round1)

        return columBaseCover
    def __makeFrontCover(self,frontCoverOrigin):
        frontCover = Part.makePlane(self.__frontCoverWidth,
                                    self.__frontCoverLength,
                                    frontCoverOrigin,
                                    Base.Vector(0,0,1)
                                    ).extrude(Base.Vector(
                                               0,0,self.__frontCoverThickness))
        round1 = Part.makeCircle(self.__frontCoverRoundRadius,
                                 frontCoverOrigin.add(
                              Base.Vector(0,-self.__frontCoverRoundRadius
                                          ,self.__frontCoverRoundRadius)),
                                 Base.Vector(0,-1,0))
        round1 = Part.Face(Part.Wire(round1)
                ).extrude(Base.Vector(0,self.__frontCoverLength + 
                                        self.__frontCoverRoundRadius,0))
        miter1 = Part.makePlane(self.__frontCoverThickness,
                                self.__frontCoverThickness,
                                frontCoverOrigin.add(
                                    Base.Vector(-self.__frontCoverRoundRadius,
                                                -self.__frontCoverRoundRadius,
                                                self.__frontCoverThickness)),
                                 Base.Vector(1,1,0)).extrude(Base.Vector(
                                            self.__frontCoverThickness,
                                            self.__frontCoverThickness,0))
        round1 = round1.cut(miter1)
        #self.miter = miter1
        frontCover = frontCover.fuse(round1)
        round1 = Part.makeCircle(self.__frontCoverRoundRadius,
                                 frontCoverOrigin.add(
                              Base.Vector(-self.__frontCoverRoundRadius,0
                                          ,self.__frontCoverRoundRadius)),
                                 Base.Vector(1,0,0))
        round1 = Part.Face(Part.Wire(round1)
                ).extrude(Base.Vector(self.__frontCoverWidth + 
                                        self.__frontCoverRoundRadius*2,0,0))
        miter1 = Part.makePlane(self.__frontCoverThickness,
                                self.__frontCoverThickness,
                                frontCoverOrigin.add(
                                    Base.Vector(self.__frontCoverRoundRadius,
                                                self.__frontCoverRoundRadius,
                                                self.__frontCoverThickness)),
                                 Base.Vector(-1,-1,0)).extrude(Base.Vector(
                                            -self.__frontCoverThickness,
                                            -self.__frontCoverThickness,0))
        round1 = round1.cut(miter1)
        #self.miter = miter1
        #self.round = round1
        miter1 = Part.makePlane(self.__frontCoverThickness,
                                self.__frontCoverThickness,
                                frontCoverOrigin.add(
                                    Base.Vector(self.__frontCoverWidth+
                                                self.__frontCoverRoundRadius,
                                                -self.__frontCoverRoundRadius,
                                                self.__frontCoverThickness)),
                                 Base.Vector(-1,1,0)).extrude(Base.Vector(
                                            -self.__frontCoverThickness,
                                            self.__frontCoverThickness,0))
        #self.miter = miter1
        round1 = round1.cut(miter1)
        frontCover = frontCover.fuse(round1)
        round1 = Part.makeCircle(self.__frontCoverRoundRadius,
                                 frontCoverOrigin.add(
                              Base.Vector(self.__frontCoverWidth,
                                          -self.__frontCoverRoundRadius
                                          ,self.__frontCoverRoundRadius)),
                                 Base.Vector(0,-1,0))
        round1 = Part.Face(Part.Wire(round1)
                ).extrude(Base.Vector(0,self.__frontCoverLength + 
                                        self.__frontCoverRoundRadius,0))
        miter1 = Part.makePlane(self.__frontCoverThickness,
                                self.__frontCoverThickness,
                                frontCoverOrigin.add(
                                    Base.Vector(self.__frontCoverWidth+
                                                self.__frontCoverRoundRadius,
                                                -self.__frontCoverRoundRadius,
                                                self.__frontCoverThickness)),
                                 Base.Vector(-1,-1,0)).extrude(Base.Vector(
                                            -self.__frontCoverThickness,
                                            -self.__frontCoverThickness,0))
        round1 = round1.cut(miter1)
        #self.round = round1
        #self.miter = miter1
        frontCover = frontCover.fuse(round1)
        return frontCover
    def show(self,doc=None):
        if doc==None:
            doc = App.activeDocument()
        obj = doc.addObject("Part::Feature",self.name+"_entryway")
        obj.Shape = self.entryway
        obj.Label=self.name+"_entryway"
        obj.ViewObject.ShapeColor=self.__entrywayColor
        try:
            obj = doc.addObject("Part::Feature",self.name+"_miter")
            obj.Shape = self.miter
            obj.Label=self.name+"_miter"
            obj.ViewObject.ShapeColor=(1.0, 0.0, 0.0)
        except AttributeError:
            obj.Document.removeObject(self.name+"_miter")
        try:
            obj = doc.addObject("Part::Feature",self.name+"_round")
            obj.Shape = self.round
            obj.Label=self.name+"_round"
            obj.ViewObject.ShapeColor=(0.0, 1.0, 0.0)
        except AttributeError:
            obj.Document.removeObject(self.name+"_round")

class FrontWall(BirchPanel):
    __leftProtrudeOrig = Base.Vector(0,0,0)
    __leftProtrudeWidth = (-213.16818237304688) - (-293.39385986328125)
    __wallHeight = 200.30540466308594-(-18.670610427856445)
    __leftProtrudeWindows = [Base.Vector(-263.86346435546875-(-293.39385986328125),0,
                                          0.8360995054244995-(-18.670610427856445)),
                             Base.Vector(-263.86346435546875-(-293.39385986328125),0,
                                          106.11219024658203-(-18.670610427856445))]
    __protrudeOffsetWidth = (162.4363250732422-115.00755310058594)+(.125*25.4)
    __mainWallWidth = (156.03421020507812-(-213.4210205078125))+(.125*25.4)
    __mainWallWindows=[Base.Vector(-171.88763427734375-(-213.4210205078125)+(.125*25.4),0,
                                   0.8360995054244995-(-18.670610427856445)),
                       Base.Vector(-171.88763427734375-(-213.4210205078125)+(.125*25.4),0,
                                    106.11219024658203-(-18.670610427856445)),
                       Base.Vector(-96.6558609008789-(-213.4210205078125)+(.125*25.4),0,
                                   0.8360995054244995-(-18.670610427856445)),
                       Base.Vector(-96.6558609008789-(-213.4210205078125)+(.125*25.4),0,
                                    106.11219024658203-(-18.670610427856445)),
                       Base.Vector(71.09040832519531-(-213.4210205078125)+(.125*25.4),0,
                                    106.11219024658203-(-18.670610427856445)),
                       Base.Vector(101.06707763671875-(-213.4210205078125)+(.125*25.4),0,
                                    106.11219024658203-(-18.670610427856445))
                      ]
    __entrywayXOffset = -48.76459503173828-(-213.16818237304688)
    def __init__(self,name,origin):
        self.name = name
        if not isinstance(origin,Base.Vector):
            raise RuntimeError("origin is not a Vector!")
        self.origin = origin
        self.leftProtrude = WallPanel(name + "_LeftProtrude",
                             self.origin.add(self.__leftProtrudeOrig),
                             self.__leftProtrudeWidth, 
                             self.__wallHeight,
                             windows=self.__leftProtrudeWindows)
        self.leftProtrude.CutZYfingers(endz=self.__wallHeight)
        self.leftProtrude.CutZYfingers(
                    xoffset=self.__leftProtrudeWidth-self.Thickness,
                    endz=self.__wallHeight)
        protrudeOffsetOrigin = self.origin.add(
                    self.__leftProtrudeOrig.add(Base.Vector(
                                        self.__leftProtrudeWidth-self.Thickness,0,0)))
        self.protrudeOffset = WallPanel(name + "_ProtrudeOffset",
                                        protrudeOffsetOrigin,
                                        self.__protrudeOffsetWidth,
                                        self.__wallHeight,
                                        side='Right')
        self.protrudeOffset.Cut(self.leftProtrude)
        mainWallOrigin = protrudeOffsetOrigin.add(Base.Vector(0,(self.__protrudeOffsetWidth-self.Thickness),0))
        self.mainWall = WallPanel(name + "_MainWall",
                                  mainWallOrigin,
                                  self.__mainWallWidth,
                                  self.__wallHeight,
                                  windows=self.__mainWallWindows)
        self.mainWall.CutZYfingers(endz=self.__wallHeight)
        self.protrudeOffset.Cut(self.mainWall)
        self.mainWall.CutZYfingers(xoffset=self.__mainWallWidth-self.Thickness,
                                   endz=self.__wallHeight)
        entrywayOrigin = mainWallOrigin.add(Base.Vector(self.__entrywayXOffset,
                                                        0,0))
        self.entryway = EntryWayAndDoor(name + "_EntryWay",
                                        entrywayOrigin)
                                        
    def show(self,doc=None):
        if doc==None:
            doc = App.activeDocument()
        self.leftProtrude.show(doc)
        self.protrudeOffset.show(doc)
        self.mainWall.show(doc)
        self.entryway.show(doc)
if __name__ == '__main__':
    if "AddamsFamilyHouse" in App.listDocuments().keys():
        App.closeDocument("AddamsFamilyHouse")
    doc = App.newDocument("AddamsFamilyHouse")
    frontWall = FrontWall("FrontWall",Base.Vector(0,0,0))
    frontWall.show(doc)
    Gui.activeDocument().activeView().viewFront()
    Gui.SendMsgToActiveView("ViewFit")
